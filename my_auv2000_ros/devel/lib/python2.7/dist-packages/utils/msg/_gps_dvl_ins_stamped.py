# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from utils/gps_dvl_ins_stamped.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class gps_dvl_ins_stamped(genpy.Message):
  _md5sum = "af19aa78b3d90a13c41e03b9a86c6e4f"
  _type = "utils/gps_dvl_ins_stamped"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint32 sample_count
float32 ekf_roll
float32 ekf_pitch
float32 ekf_yaw
float64 ekf_lat
float64 ekf_lon
float32 ekf_alt
float32 ekf_vN
float32 ekf_vE
float32 ekf_vD
float32 ekf_vX
float32 ekf_vY
float32 ekf_vZ
float32 rad_gyro_X
float32 rad_gyro_Y
float32 rad_gyro_Z
float32 angular_acc_X
float32 angular_acc_Y
float32 angular_acc_Z
uint16 alt_DVL
uint8[] dvl_error_code
uint8 flag_to_check
float32 imu_deg_gyro_X
float32 imu_deg_gyro_Y
float32 imu_deg_gyro_Z
float32 imu_mag_X
float32 imu_mag_Y
float32 imu_mag_Z
float32 imu_acc_X
float32 imu_acc_Y
float32 imu_acc_Z
int32 gps_lat
int32 gps_lon
float32 gps_alt
float32 gps_vN
float32 gps_vE
float32 gps_vD
float32 dvl_vX
float32 dvl_vY
float32 dvl_vZ

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','sample_count','ekf_roll','ekf_pitch','ekf_yaw','ekf_lat','ekf_lon','ekf_alt','ekf_vN','ekf_vE','ekf_vD','ekf_vX','ekf_vY','ekf_vZ','rad_gyro_X','rad_gyro_Y','rad_gyro_Z','angular_acc_X','angular_acc_Y','angular_acc_Z','alt_DVL','dvl_error_code','flag_to_check','imu_deg_gyro_X','imu_deg_gyro_Y','imu_deg_gyro_Z','imu_mag_X','imu_mag_Y','imu_mag_Z','imu_acc_X','imu_acc_Y','imu_acc_Z','gps_lat','gps_lon','gps_alt','gps_vN','gps_vE','gps_vD','dvl_vX','dvl_vY','dvl_vZ']
  _slot_types = ['std_msgs/Header','uint32','float32','float32','float32','float64','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint16','uint8[]','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sample_count,ekf_roll,ekf_pitch,ekf_yaw,ekf_lat,ekf_lon,ekf_alt,ekf_vN,ekf_vE,ekf_vD,ekf_vX,ekf_vY,ekf_vZ,rad_gyro_X,rad_gyro_Y,rad_gyro_Z,angular_acc_X,angular_acc_Y,angular_acc_Z,alt_DVL,dvl_error_code,flag_to_check,imu_deg_gyro_X,imu_deg_gyro_Y,imu_deg_gyro_Z,imu_mag_X,imu_mag_Y,imu_mag_Z,imu_acc_X,imu_acc_Y,imu_acc_Z,gps_lat,gps_lon,gps_alt,gps_vN,gps_vE,gps_vD,dvl_vX,dvl_vY,dvl_vZ

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gps_dvl_ins_stamped, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sample_count is None:
        self.sample_count = 0
      if self.ekf_roll is None:
        self.ekf_roll = 0.
      if self.ekf_pitch is None:
        self.ekf_pitch = 0.
      if self.ekf_yaw is None:
        self.ekf_yaw = 0.
      if self.ekf_lat is None:
        self.ekf_lat = 0.
      if self.ekf_lon is None:
        self.ekf_lon = 0.
      if self.ekf_alt is None:
        self.ekf_alt = 0.
      if self.ekf_vN is None:
        self.ekf_vN = 0.
      if self.ekf_vE is None:
        self.ekf_vE = 0.
      if self.ekf_vD is None:
        self.ekf_vD = 0.
      if self.ekf_vX is None:
        self.ekf_vX = 0.
      if self.ekf_vY is None:
        self.ekf_vY = 0.
      if self.ekf_vZ is None:
        self.ekf_vZ = 0.
      if self.rad_gyro_X is None:
        self.rad_gyro_X = 0.
      if self.rad_gyro_Y is None:
        self.rad_gyro_Y = 0.
      if self.rad_gyro_Z is None:
        self.rad_gyro_Z = 0.
      if self.angular_acc_X is None:
        self.angular_acc_X = 0.
      if self.angular_acc_Y is None:
        self.angular_acc_Y = 0.
      if self.angular_acc_Z is None:
        self.angular_acc_Z = 0.
      if self.alt_DVL is None:
        self.alt_DVL = 0
      if self.dvl_error_code is None:
        self.dvl_error_code = b''
      if self.flag_to_check is None:
        self.flag_to_check = 0
      if self.imu_deg_gyro_X is None:
        self.imu_deg_gyro_X = 0.
      if self.imu_deg_gyro_Y is None:
        self.imu_deg_gyro_Y = 0.
      if self.imu_deg_gyro_Z is None:
        self.imu_deg_gyro_Z = 0.
      if self.imu_mag_X is None:
        self.imu_mag_X = 0.
      if self.imu_mag_Y is None:
        self.imu_mag_Y = 0.
      if self.imu_mag_Z is None:
        self.imu_mag_Z = 0.
      if self.imu_acc_X is None:
        self.imu_acc_X = 0.
      if self.imu_acc_Y is None:
        self.imu_acc_Y = 0.
      if self.imu_acc_Z is None:
        self.imu_acc_Z = 0.
      if self.gps_lat is None:
        self.gps_lat = 0
      if self.gps_lon is None:
        self.gps_lon = 0
      if self.gps_alt is None:
        self.gps_alt = 0.
      if self.gps_vN is None:
        self.gps_vN = 0.
      if self.gps_vE is None:
        self.gps_vE = 0.
      if self.gps_vD is None:
        self.gps_vD = 0.
      if self.dvl_vX is None:
        self.dvl_vX = 0.
      if self.dvl_vY is None:
        self.dvl_vY = 0.
      if self.dvl_vZ is None:
        self.dvl_vZ = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.sample_count = 0
      self.ekf_roll = 0.
      self.ekf_pitch = 0.
      self.ekf_yaw = 0.
      self.ekf_lat = 0.
      self.ekf_lon = 0.
      self.ekf_alt = 0.
      self.ekf_vN = 0.
      self.ekf_vE = 0.
      self.ekf_vD = 0.
      self.ekf_vX = 0.
      self.ekf_vY = 0.
      self.ekf_vZ = 0.
      self.rad_gyro_X = 0.
      self.rad_gyro_Y = 0.
      self.rad_gyro_Z = 0.
      self.angular_acc_X = 0.
      self.angular_acc_Y = 0.
      self.angular_acc_Z = 0.
      self.alt_DVL = 0
      self.dvl_error_code = b''
      self.flag_to_check = 0
      self.imu_deg_gyro_X = 0.
      self.imu_deg_gyro_Y = 0.
      self.imu_deg_gyro_Z = 0.
      self.imu_mag_X = 0.
      self.imu_mag_Y = 0.
      self.imu_mag_Z = 0.
      self.imu_acc_X = 0.
      self.imu_acc_Y = 0.
      self.imu_acc_Z = 0.
      self.gps_lat = 0
      self.gps_lon = 0
      self.gps_alt = 0.
      self.gps_vN = 0.
      self.gps_vE = 0.
      self.gps_vD = 0.
      self.dvl_vX = 0.
      self.dvl_vY = 0.
      self.dvl_vZ = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I3f2d13fH().pack(_x.sample_count, _x.ekf_roll, _x.ekf_pitch, _x.ekf_yaw, _x.ekf_lat, _x.ekf_lon, _x.ekf_alt, _x.ekf_vN, _x.ekf_vE, _x.ekf_vD, _x.ekf_vX, _x.ekf_vY, _x.ekf_vZ, _x.rad_gyro_X, _x.rad_gyro_Y, _x.rad_gyro_Z, _x.angular_acc_X, _x.angular_acc_Y, _x.angular_acc_Z, _x.alt_DVL))
      _x = self.dvl_error_code
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B9f2i7f().pack(_x.flag_to_check, _x.imu_deg_gyro_X, _x.imu_deg_gyro_Y, _x.imu_deg_gyro_Z, _x.imu_mag_X, _x.imu_mag_Y, _x.imu_mag_Z, _x.imu_acc_X, _x.imu_acc_Y, _x.imu_acc_Z, _x.gps_lat, _x.gps_lon, _x.gps_alt, _x.gps_vN, _x.gps_vE, _x.gps_vD, _x.dvl_vX, _x.dvl_vY, _x.dvl_vZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 86
      (_x.sample_count, _x.ekf_roll, _x.ekf_pitch, _x.ekf_yaw, _x.ekf_lat, _x.ekf_lon, _x.ekf_alt, _x.ekf_vN, _x.ekf_vE, _x.ekf_vD, _x.ekf_vX, _x.ekf_vY, _x.ekf_vZ, _x.rad_gyro_X, _x.rad_gyro_Y, _x.rad_gyro_Z, _x.angular_acc_X, _x.angular_acc_Y, _x.angular_acc_Z, _x.alt_DVL,) = _get_struct_I3f2d13fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.dvl_error_code = str[start:end]
      _x = self
      start = end
      end += 73
      (_x.flag_to_check, _x.imu_deg_gyro_X, _x.imu_deg_gyro_Y, _x.imu_deg_gyro_Z, _x.imu_mag_X, _x.imu_mag_Y, _x.imu_mag_Z, _x.imu_acc_X, _x.imu_acc_Y, _x.imu_acc_Z, _x.gps_lat, _x.gps_lon, _x.gps_alt, _x.gps_vN, _x.gps_vE, _x.gps_vD, _x.dvl_vX, _x.dvl_vY, _x.dvl_vZ,) = _get_struct_B9f2i7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I3f2d13fH().pack(_x.sample_count, _x.ekf_roll, _x.ekf_pitch, _x.ekf_yaw, _x.ekf_lat, _x.ekf_lon, _x.ekf_alt, _x.ekf_vN, _x.ekf_vE, _x.ekf_vD, _x.ekf_vX, _x.ekf_vY, _x.ekf_vZ, _x.rad_gyro_X, _x.rad_gyro_Y, _x.rad_gyro_Z, _x.angular_acc_X, _x.angular_acc_Y, _x.angular_acc_Z, _x.alt_DVL))
      _x = self.dvl_error_code
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B9f2i7f().pack(_x.flag_to_check, _x.imu_deg_gyro_X, _x.imu_deg_gyro_Y, _x.imu_deg_gyro_Z, _x.imu_mag_X, _x.imu_mag_Y, _x.imu_mag_Z, _x.imu_acc_X, _x.imu_acc_Y, _x.imu_acc_Z, _x.gps_lat, _x.gps_lon, _x.gps_alt, _x.gps_vN, _x.gps_vE, _x.gps_vD, _x.dvl_vX, _x.dvl_vY, _x.dvl_vZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 86
      (_x.sample_count, _x.ekf_roll, _x.ekf_pitch, _x.ekf_yaw, _x.ekf_lat, _x.ekf_lon, _x.ekf_alt, _x.ekf_vN, _x.ekf_vE, _x.ekf_vD, _x.ekf_vX, _x.ekf_vY, _x.ekf_vZ, _x.rad_gyro_X, _x.rad_gyro_Y, _x.rad_gyro_Z, _x.angular_acc_X, _x.angular_acc_Y, _x.angular_acc_Z, _x.alt_DVL,) = _get_struct_I3f2d13fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.dvl_error_code = str[start:end]
      _x = self
      start = end
      end += 73
      (_x.flag_to_check, _x.imu_deg_gyro_X, _x.imu_deg_gyro_Y, _x.imu_deg_gyro_Z, _x.imu_mag_X, _x.imu_mag_Y, _x.imu_mag_Z, _x.imu_acc_X, _x.imu_acc_Y, _x.imu_acc_Z, _x.gps_lat, _x.gps_lon, _x.gps_alt, _x.gps_vN, _x.gps_vE, _x.gps_vD, _x.dvl_vX, _x.dvl_vY, _x.dvl_vZ,) = _get_struct_B9f2i7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B9f2i7f = None
def _get_struct_B9f2i7f():
    global _struct_B9f2i7f
    if _struct_B9f2i7f is None:
        _struct_B9f2i7f = struct.Struct("<B9f2i7f")
    return _struct_B9f2i7f
_struct_I3f2d13fH = None
def _get_struct_I3f2d13fH():
    global _struct_I3f2d13fH
    if _struct_I3f2d13fH is None:
        _struct_I3f2d13fH = struct.Struct("<I3f2d13fH")
    return _struct_I3f2d13fH

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auv_msgs_stamped/board_arm1_stamped.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auv_msgs_stamped.msg
import std_msgs.msg

class board_arm1_stamped(genpy.Message):
  _md5sum = "c28a8228e95086d0dee93628397343b3"
  _type = "auv_msgs_stamped/board_arm1_stamped"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
motor_stamped pistol_status
motor_stamped mass_shifter_status
bms_stamped bms_status
altimeter_stamped altimeter_status
anti_rolling_stamped roll_motor_status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: auv_msgs_stamped/motor_stamped
float32 position
float32 motor_duty
float32 motor_temp_on_chip
float32 motor_temp_ambient
float32 motor_current
float32 motor_rspeed
float32 motor_dspeed

================================================================================
MSG: auv_msgs_stamped/bms_stamped
float32 batteryTotal
float32 batteryCapacity
float32 batteryUsed
float32 batteryPercentage
float32 batteryCurrent
float32 baterryVoltage

================================================================================
MSG: auv_msgs_stamped/altimeter_stamped
float32 alt_in_metres
float32 alt_in_fathoms
float32 alt_in_feet

================================================================================
MSG: auv_msgs_stamped/anti_rolling_stamped
float32 kp
float32 ki
float32 kd
float32 angle
"""
  __slots__ = ['header','pistol_status','mass_shifter_status','bms_status','altimeter_status','roll_motor_status']
  _slot_types = ['std_msgs/Header','auv_msgs_stamped/motor_stamped','auv_msgs_stamped/motor_stamped','auv_msgs_stamped/bms_stamped','auv_msgs_stamped/altimeter_stamped','auv_msgs_stamped/anti_rolling_stamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pistol_status,mass_shifter_status,bms_status,altimeter_status,roll_motor_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(board_arm1_stamped, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pistol_status is None:
        self.pistol_status = auv_msgs_stamped.msg.motor_stamped()
      if self.mass_shifter_status is None:
        self.mass_shifter_status = auv_msgs_stamped.msg.motor_stamped()
      if self.bms_status is None:
        self.bms_status = auv_msgs_stamped.msg.bms_stamped()
      if self.altimeter_status is None:
        self.altimeter_status = auv_msgs_stamped.msg.altimeter_stamped()
      if self.roll_motor_status is None:
        self.roll_motor_status = auv_msgs_stamped.msg.anti_rolling_stamped()
    else:
      self.header = std_msgs.msg.Header()
      self.pistol_status = auv_msgs_stamped.msg.motor_stamped()
      self.mass_shifter_status = auv_msgs_stamped.msg.motor_stamped()
      self.bms_status = auv_msgs_stamped.msg.bms_stamped()
      self.altimeter_status = auv_msgs_stamped.msg.altimeter_stamped()
      self.roll_motor_status = auv_msgs_stamped.msg.anti_rolling_stamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_27f().pack(_x.pistol_status.position, _x.pistol_status.motor_duty, _x.pistol_status.motor_temp_on_chip, _x.pistol_status.motor_temp_ambient, _x.pistol_status.motor_current, _x.pistol_status.motor_rspeed, _x.pistol_status.motor_dspeed, _x.mass_shifter_status.position, _x.mass_shifter_status.motor_duty, _x.mass_shifter_status.motor_temp_on_chip, _x.mass_shifter_status.motor_temp_ambient, _x.mass_shifter_status.motor_current, _x.mass_shifter_status.motor_rspeed, _x.mass_shifter_status.motor_dspeed, _x.bms_status.batteryTotal, _x.bms_status.batteryCapacity, _x.bms_status.batteryUsed, _x.bms_status.batteryPercentage, _x.bms_status.batteryCurrent, _x.bms_status.baterryVoltage, _x.altimeter_status.alt_in_metres, _x.altimeter_status.alt_in_fathoms, _x.altimeter_status.alt_in_feet, _x.roll_motor_status.kp, _x.roll_motor_status.ki, _x.roll_motor_status.kd, _x.roll_motor_status.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pistol_status is None:
        self.pistol_status = auv_msgs_stamped.msg.motor_stamped()
      if self.mass_shifter_status is None:
        self.mass_shifter_status = auv_msgs_stamped.msg.motor_stamped()
      if self.bms_status is None:
        self.bms_status = auv_msgs_stamped.msg.bms_stamped()
      if self.altimeter_status is None:
        self.altimeter_status = auv_msgs_stamped.msg.altimeter_stamped()
      if self.roll_motor_status is None:
        self.roll_motor_status = auv_msgs_stamped.msg.anti_rolling_stamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.pistol_status.position, _x.pistol_status.motor_duty, _x.pistol_status.motor_temp_on_chip, _x.pistol_status.motor_temp_ambient, _x.pistol_status.motor_current, _x.pistol_status.motor_rspeed, _x.pistol_status.motor_dspeed, _x.mass_shifter_status.position, _x.mass_shifter_status.motor_duty, _x.mass_shifter_status.motor_temp_on_chip, _x.mass_shifter_status.motor_temp_ambient, _x.mass_shifter_status.motor_current, _x.mass_shifter_status.motor_rspeed, _x.mass_shifter_status.motor_dspeed, _x.bms_status.batteryTotal, _x.bms_status.batteryCapacity, _x.bms_status.batteryUsed, _x.bms_status.batteryPercentage, _x.bms_status.batteryCurrent, _x.bms_status.baterryVoltage, _x.altimeter_status.alt_in_metres, _x.altimeter_status.alt_in_fathoms, _x.altimeter_status.alt_in_feet, _x.roll_motor_status.kp, _x.roll_motor_status.ki, _x.roll_motor_status.kd, _x.roll_motor_status.angle,) = _get_struct_27f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_27f().pack(_x.pistol_status.position, _x.pistol_status.motor_duty, _x.pistol_status.motor_temp_on_chip, _x.pistol_status.motor_temp_ambient, _x.pistol_status.motor_current, _x.pistol_status.motor_rspeed, _x.pistol_status.motor_dspeed, _x.mass_shifter_status.position, _x.mass_shifter_status.motor_duty, _x.mass_shifter_status.motor_temp_on_chip, _x.mass_shifter_status.motor_temp_ambient, _x.mass_shifter_status.motor_current, _x.mass_shifter_status.motor_rspeed, _x.mass_shifter_status.motor_dspeed, _x.bms_status.batteryTotal, _x.bms_status.batteryCapacity, _x.bms_status.batteryUsed, _x.bms_status.batteryPercentage, _x.bms_status.batteryCurrent, _x.bms_status.baterryVoltage, _x.altimeter_status.alt_in_metres, _x.altimeter_status.alt_in_fathoms, _x.altimeter_status.alt_in_feet, _x.roll_motor_status.kp, _x.roll_motor_status.ki, _x.roll_motor_status.kd, _x.roll_motor_status.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pistol_status is None:
        self.pistol_status = auv_msgs_stamped.msg.motor_stamped()
      if self.mass_shifter_status is None:
        self.mass_shifter_status = auv_msgs_stamped.msg.motor_stamped()
      if self.bms_status is None:
        self.bms_status = auv_msgs_stamped.msg.bms_stamped()
      if self.altimeter_status is None:
        self.altimeter_status = auv_msgs_stamped.msg.altimeter_stamped()
      if self.roll_motor_status is None:
        self.roll_motor_status = auv_msgs_stamped.msg.anti_rolling_stamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.pistol_status.position, _x.pistol_status.motor_duty, _x.pistol_status.motor_temp_on_chip, _x.pistol_status.motor_temp_ambient, _x.pistol_status.motor_current, _x.pistol_status.motor_rspeed, _x.pistol_status.motor_dspeed, _x.mass_shifter_status.position, _x.mass_shifter_status.motor_duty, _x.mass_shifter_status.motor_temp_on_chip, _x.mass_shifter_status.motor_temp_ambient, _x.mass_shifter_status.motor_current, _x.mass_shifter_status.motor_rspeed, _x.mass_shifter_status.motor_dspeed, _x.bms_status.batteryTotal, _x.bms_status.batteryCapacity, _x.bms_status.batteryUsed, _x.bms_status.batteryPercentage, _x.bms_status.batteryCurrent, _x.bms_status.baterryVoltage, _x.altimeter_status.alt_in_metres, _x.altimeter_status.alt_in_fathoms, _x.altimeter_status.alt_in_feet, _x.roll_motor_status.kp, _x.roll_motor_status.ki, _x.roll_motor_status.kd, _x.roll_motor_status.angle,) = _get_struct_27f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_27f = None
def _get_struct_27f():
    global _struct_27f
    if _struct_27f is None:
        _struct_27f = struct.Struct("<27f")
    return _struct_27f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I

// Generated by gencpp from file auv_msgs_stamped/joystick_stamped.msg
// DO NOT EDIT!


#ifndef AUV_MSGS_STAMPED_MESSAGE_JOYSTICK_STAMPED_H
#define AUV_MSGS_STAMPED_MESSAGE_JOYSTICK_STAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace auv_msgs_stamped
{
template <class ContainerAllocator>
struct joystick_stamped_
{
  typedef joystick_stamped_<ContainerAllocator> Type;

  joystick_stamped_()
    : arrow_left(false)
    , arrow_right(false)
    , mass_shifter_up(false)
    , mass_shifter_down(false)
    , button_x(false)
    , pistol_up(false)
    , button_b(false)
    , pistol_down(false)
    , button_back(false)
    , button_start(false)
    , bhat_lt(false)
    , bhat_lb(false)
    , bhat_rt(false)
    , bhat_rb(false)
    , rudder(0)
    , thruster(0)
    , z(0)
    , r(0)  {
    }
  joystick_stamped_(const ContainerAllocator& _alloc)
    : arrow_left(false)
    , arrow_right(false)
    , mass_shifter_up(false)
    , mass_shifter_down(false)
    , button_x(false)
    , pistol_up(false)
    , button_b(false)
    , pistol_down(false)
    , button_back(false)
    , button_start(false)
    , bhat_lt(false)
    , bhat_lb(false)
    , bhat_rt(false)
    , bhat_rb(false)
    , rudder(0)
    , thruster(0)
    , z(0)
    , r(0)  {
  (void)_alloc;
    }



   typedef uint8_t _arrow_left_type;
  _arrow_left_type arrow_left;

   typedef uint8_t _arrow_right_type;
  _arrow_right_type arrow_right;

   typedef uint8_t _mass_shifter_up_type;
  _mass_shifter_up_type mass_shifter_up;

   typedef uint8_t _mass_shifter_down_type;
  _mass_shifter_down_type mass_shifter_down;

   typedef uint8_t _button_x_type;
  _button_x_type button_x;

   typedef uint8_t _pistol_up_type;
  _pistol_up_type pistol_up;

   typedef uint8_t _button_b_type;
  _button_b_type button_b;

   typedef uint8_t _pistol_down_type;
  _pistol_down_type pistol_down;

   typedef uint8_t _button_back_type;
  _button_back_type button_back;

   typedef uint8_t _button_start_type;
  _button_start_type button_start;

   typedef uint8_t _bhat_lt_type;
  _bhat_lt_type bhat_lt;

   typedef uint8_t _bhat_lb_type;
  _bhat_lb_type bhat_lb;

   typedef uint8_t _bhat_rt_type;
  _bhat_rt_type bhat_rt;

   typedef uint8_t _bhat_rb_type;
  _bhat_rb_type bhat_rb;

   typedef int16_t _rudder_type;
  _rudder_type rudder;

   typedef int16_t _thruster_type;
  _thruster_type thruster;

   typedef int16_t _z_type;
  _z_type z;

   typedef int16_t _r_type;
  _r_type r;





  typedef boost::shared_ptr< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> const> ConstPtr;

}; // struct joystick_stamped_

typedef ::auv_msgs_stamped::joystick_stamped_<std::allocator<void> > joystick_stamped;

typedef boost::shared_ptr< ::auv_msgs_stamped::joystick_stamped > joystick_stampedPtr;
typedef boost::shared_ptr< ::auv_msgs_stamped::joystick_stamped const> joystick_stampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator1> & lhs, const ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator2> & rhs)
{
  return lhs.arrow_left == rhs.arrow_left &&
    lhs.arrow_right == rhs.arrow_right &&
    lhs.mass_shifter_up == rhs.mass_shifter_up &&
    lhs.mass_shifter_down == rhs.mass_shifter_down &&
    lhs.button_x == rhs.button_x &&
    lhs.pistol_up == rhs.pistol_up &&
    lhs.button_b == rhs.button_b &&
    lhs.pistol_down == rhs.pistol_down &&
    lhs.button_back == rhs.button_back &&
    lhs.button_start == rhs.button_start &&
    lhs.bhat_lt == rhs.bhat_lt &&
    lhs.bhat_lb == rhs.bhat_lb &&
    lhs.bhat_rt == rhs.bhat_rt &&
    lhs.bhat_rb == rhs.bhat_rb &&
    lhs.rudder == rhs.rudder &&
    lhs.thruster == rhs.thruster &&
    lhs.z == rhs.z &&
    lhs.r == rhs.r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator1> & lhs, const ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace auv_msgs_stamped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f06eae7095797a9bb9cf16fda02c08e";
  }

  static const char* value(const ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f06eae7095797a9ULL;
  static const uint64_t static_value2 = 0xbb9cf16fda02c08eULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auv_msgs_stamped/joystick_stamped";
  }

  static const char* value(const ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool arrow_left\n"
"bool arrow_right\n"
"bool mass_shifter_up\n"
"bool mass_shifter_down\n"
"bool button_x\n"
"bool pistol_up\n"
"bool button_b\n"
"bool pistol_down\n"
"bool button_back\n"
"bool button_start\n"
"bool bhat_lt\n"
"bool bhat_lb\n"
"bool bhat_rt\n"
"bool bhat_rb\n"
"int16 rudder\n"
"int16 thruster\n"
"int16 z\n"
"int16 r\n"
;
  }

  static const char* value(const ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arrow_left);
      stream.next(m.arrow_right);
      stream.next(m.mass_shifter_up);
      stream.next(m.mass_shifter_down);
      stream.next(m.button_x);
      stream.next(m.pistol_up);
      stream.next(m.button_b);
      stream.next(m.pistol_down);
      stream.next(m.button_back);
      stream.next(m.button_start);
      stream.next(m.bhat_lt);
      stream.next(m.bhat_lb);
      stream.next(m.bhat_rt);
      stream.next(m.bhat_rb);
      stream.next(m.rudder);
      stream.next(m.thruster);
      stream.next(m.z);
      stream.next(m.r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joystick_stamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auv_msgs_stamped::joystick_stamped_<ContainerAllocator>& v)
  {
    s << indent << "arrow_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arrow_left);
    s << indent << "arrow_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arrow_right);
    s << indent << "mass_shifter_up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mass_shifter_up);
    s << indent << "mass_shifter_down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mass_shifter_down);
    s << indent << "button_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_x);
    s << indent << "pistol_up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pistol_up);
    s << indent << "button_b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_b);
    s << indent << "pistol_down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pistol_down);
    s << indent << "button_back: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_back);
    s << indent << "button_start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_start);
    s << indent << "bhat_lt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bhat_lt);
    s << indent << "bhat_lb: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bhat_lb);
    s << indent << "bhat_rt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bhat_rt);
    s << indent << "bhat_rb: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bhat_rb);
    s << indent << "rudder: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rudder);
    s << indent << "thruster: ";
    Printer<int16_t>::stream(s, indent + "  ", v.thruster);
    s << indent << "z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z);
    s << indent << "r: ";
    Printer<int16_t>::stream(s, indent + "  ", v.r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_STAMPED_MESSAGE_JOYSTICK_STAMPED_H

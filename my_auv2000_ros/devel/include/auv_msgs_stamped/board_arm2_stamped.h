// Generated by gencpp from file auv_msgs_stamped/board_arm2_stamped.msg
// DO NOT EDIT!


#ifndef AUV_MSGS_STAMPED_MESSAGE_BOARD_ARM2_STAMPED_H
#define AUV_MSGS_STAMPED_MESSAGE_BOARD_ARM2_STAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <auv_msgs_stamped/mx28_stamped.h>
#include <auv_msgs_stamped/bms_stamped.h>
#include <auv_msgs_stamped/keller_pa3_stamped.h>
#include <auv_msgs_stamped/anti_rolling_stamped.h>

namespace auv_msgs_stamped
{
template <class ContainerAllocator>
struct board_arm2_stamped_
{
  typedef board_arm2_stamped_<ContainerAllocator> Type;

  board_arm2_stamped_()
    : header()
    , mx28_status()
    , bms_status()
    , pressure_status()
    , roll_motor_status()  {
    }
  board_arm2_stamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mx28_status(_alloc)
    , bms_status(_alloc)
    , pressure_status(_alloc)
    , roll_motor_status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::auv_msgs_stamped::mx28_stamped_<ContainerAllocator>  _mx28_status_type;
  _mx28_status_type mx28_status;

   typedef  ::auv_msgs_stamped::bms_stamped_<ContainerAllocator>  _bms_status_type;
  _bms_status_type bms_status;

   typedef  ::auv_msgs_stamped::keller_pa3_stamped_<ContainerAllocator>  _pressure_status_type;
  _pressure_status_type pressure_status;

   typedef  ::auv_msgs_stamped::anti_rolling_stamped_<ContainerAllocator>  _roll_motor_status_type;
  _roll_motor_status_type roll_motor_status;





  typedef boost::shared_ptr< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> const> ConstPtr;

}; // struct board_arm2_stamped_

typedef ::auv_msgs_stamped::board_arm2_stamped_<std::allocator<void> > board_arm2_stamped;

typedef boost::shared_ptr< ::auv_msgs_stamped::board_arm2_stamped > board_arm2_stampedPtr;
typedef boost::shared_ptr< ::auv_msgs_stamped::board_arm2_stamped const> board_arm2_stampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator1> & lhs, const ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mx28_status == rhs.mx28_status &&
    lhs.bms_status == rhs.bms_status &&
    lhs.pressure_status == rhs.pressure_status &&
    lhs.roll_motor_status == rhs.roll_motor_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator1> & lhs, const ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace auv_msgs_stamped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "521c67addccb2fe148b0af42a4f47323";
  }

  static const char* value(const ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x521c67addccb2fe1ULL;
  static const uint64_t static_value2 = 0x48b0af42a4f47323ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auv_msgs_stamped/board_arm2_stamped";
  }

  static const char* value(const ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"mx28_stamped mx28_status\n"
"bms_stamped bms_status\n"
"keller_pa3_stamped pressure_status\n"
"anti_rolling_stamped roll_motor_status\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: auv_msgs_stamped/mx28_stamped\n"
"float32 position\n"
"float32 speed\n"
"float32 load\n"
"float32 voltage\n"
"float32 temperature\n"
"\n"
"================================================================================\n"
"MSG: auv_msgs_stamped/bms_stamped\n"
"float32 batteryTotal\n"
"float32 batteryCapacity\n"
"float32 batteryUsed\n"
"float32 batteryPercentage\n"
"float32 batteryCurrent\n"
"float32 baterryVoltage\n"
"\n"
"================================================================================\n"
"MSG: auv_msgs_stamped/keller_pa3_stamped\n"
"float32 pressure\n"
"float32 temperature\n"
"\n"
"================================================================================\n"
"MSG: auv_msgs_stamped/anti_rolling_stamped\n"
"float32 kp\n"
"float32 ki\n"
"float32 kd\n"
"float32 angle\n"
;
  }

  static const char* value(const ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mx28_status);
      stream.next(m.bms_status);
      stream.next(m.pressure_status);
      stream.next(m.roll_motor_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct board_arm2_stamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auv_msgs_stamped::board_arm2_stamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mx28_status: ";
    s << std::endl;
    Printer< ::auv_msgs_stamped::mx28_stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.mx28_status);
    s << indent << "bms_status: ";
    s << std::endl;
    Printer< ::auv_msgs_stamped::bms_stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.bms_status);
    s << indent << "pressure_status: ";
    s << std::endl;
    Printer< ::auv_msgs_stamped::keller_pa3_stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pressure_status);
    s << indent << "roll_motor_status: ";
    s << std::endl;
    Printer< ::auv_msgs_stamped::anti_rolling_stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.roll_motor_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_STAMPED_MESSAGE_BOARD_ARM2_STAMPED_H

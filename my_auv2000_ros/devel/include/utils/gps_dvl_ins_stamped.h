// Generated by gencpp from file utils/gps_dvl_ins_stamped.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_GPS_DVL_INS_STAMPED_H
#define UTILS_MESSAGE_GPS_DVL_INS_STAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace utils
{
template <class ContainerAllocator>
struct gps_dvl_ins_stamped_
{
  typedef gps_dvl_ins_stamped_<ContainerAllocator> Type;

  gps_dvl_ins_stamped_()
    : header()
    , sample_count(0)
    , ekf_roll(0.0)
    , ekf_pitch(0.0)
    , ekf_yaw(0.0)
    , ekf_lat(0.0)
    , ekf_lon(0.0)
    , ekf_alt(0.0)
    , ekf_vN(0.0)
    , ekf_vE(0.0)
    , ekf_vD(0.0)
    , ekf_vX(0.0)
    , ekf_vY(0.0)
    , ekf_vZ(0.0)
    , rad_gyro_X(0.0)
    , rad_gyro_Y(0.0)
    , rad_gyro_Z(0.0)
    , angular_acc_X(0.0)
    , angular_acc_Y(0.0)
    , angular_acc_Z(0.0)
    , alt_DVL(0)
    , dvl_error_code()
    , flag_to_check(0)
    , imu_deg_gyro_X(0.0)
    , imu_deg_gyro_Y(0.0)
    , imu_deg_gyro_Z(0.0)
    , imu_mag_X(0.0)
    , imu_mag_Y(0.0)
    , imu_mag_Z(0.0)
    , imu_acc_X(0.0)
    , imu_acc_Y(0.0)
    , imu_acc_Z(0.0)
    , gps_lat(0)
    , gps_lon(0)
    , gps_alt(0.0)
    , gps_vN(0.0)
    , gps_vE(0.0)
    , gps_vD(0.0)
    , dvl_vX(0.0)
    , dvl_vY(0.0)
    , dvl_vZ(0.0)  {
    }
  gps_dvl_ins_stamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sample_count(0)
    , ekf_roll(0.0)
    , ekf_pitch(0.0)
    , ekf_yaw(0.0)
    , ekf_lat(0.0)
    , ekf_lon(0.0)
    , ekf_alt(0.0)
    , ekf_vN(0.0)
    , ekf_vE(0.0)
    , ekf_vD(0.0)
    , ekf_vX(0.0)
    , ekf_vY(0.0)
    , ekf_vZ(0.0)
    , rad_gyro_X(0.0)
    , rad_gyro_Y(0.0)
    , rad_gyro_Z(0.0)
    , angular_acc_X(0.0)
    , angular_acc_Y(0.0)
    , angular_acc_Z(0.0)
    , alt_DVL(0)
    , dvl_error_code(_alloc)
    , flag_to_check(0)
    , imu_deg_gyro_X(0.0)
    , imu_deg_gyro_Y(0.0)
    , imu_deg_gyro_Z(0.0)
    , imu_mag_X(0.0)
    , imu_mag_Y(0.0)
    , imu_mag_Z(0.0)
    , imu_acc_X(0.0)
    , imu_acc_Y(0.0)
    , imu_acc_Z(0.0)
    , gps_lat(0)
    , gps_lon(0)
    , gps_alt(0.0)
    , gps_vN(0.0)
    , gps_vE(0.0)
    , gps_vD(0.0)
    , dvl_vX(0.0)
    , dvl_vY(0.0)
    , dvl_vZ(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _sample_count_type;
  _sample_count_type sample_count;

   typedef float _ekf_roll_type;
  _ekf_roll_type ekf_roll;

   typedef float _ekf_pitch_type;
  _ekf_pitch_type ekf_pitch;

   typedef float _ekf_yaw_type;
  _ekf_yaw_type ekf_yaw;

   typedef double _ekf_lat_type;
  _ekf_lat_type ekf_lat;

   typedef double _ekf_lon_type;
  _ekf_lon_type ekf_lon;

   typedef float _ekf_alt_type;
  _ekf_alt_type ekf_alt;

   typedef float _ekf_vN_type;
  _ekf_vN_type ekf_vN;

   typedef float _ekf_vE_type;
  _ekf_vE_type ekf_vE;

   typedef float _ekf_vD_type;
  _ekf_vD_type ekf_vD;

   typedef float _ekf_vX_type;
  _ekf_vX_type ekf_vX;

   typedef float _ekf_vY_type;
  _ekf_vY_type ekf_vY;

   typedef float _ekf_vZ_type;
  _ekf_vZ_type ekf_vZ;

   typedef float _rad_gyro_X_type;
  _rad_gyro_X_type rad_gyro_X;

   typedef float _rad_gyro_Y_type;
  _rad_gyro_Y_type rad_gyro_Y;

   typedef float _rad_gyro_Z_type;
  _rad_gyro_Z_type rad_gyro_Z;

   typedef float _angular_acc_X_type;
  _angular_acc_X_type angular_acc_X;

   typedef float _angular_acc_Y_type;
  _angular_acc_Y_type angular_acc_Y;

   typedef float _angular_acc_Z_type;
  _angular_acc_Z_type angular_acc_Z;

   typedef uint16_t _alt_DVL_type;
  _alt_DVL_type alt_DVL;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _dvl_error_code_type;
  _dvl_error_code_type dvl_error_code;

   typedef uint8_t _flag_to_check_type;
  _flag_to_check_type flag_to_check;

   typedef float _imu_deg_gyro_X_type;
  _imu_deg_gyro_X_type imu_deg_gyro_X;

   typedef float _imu_deg_gyro_Y_type;
  _imu_deg_gyro_Y_type imu_deg_gyro_Y;

   typedef float _imu_deg_gyro_Z_type;
  _imu_deg_gyro_Z_type imu_deg_gyro_Z;

   typedef float _imu_mag_X_type;
  _imu_mag_X_type imu_mag_X;

   typedef float _imu_mag_Y_type;
  _imu_mag_Y_type imu_mag_Y;

   typedef float _imu_mag_Z_type;
  _imu_mag_Z_type imu_mag_Z;

   typedef float _imu_acc_X_type;
  _imu_acc_X_type imu_acc_X;

   typedef float _imu_acc_Y_type;
  _imu_acc_Y_type imu_acc_Y;

   typedef float _imu_acc_Z_type;
  _imu_acc_Z_type imu_acc_Z;

   typedef int32_t _gps_lat_type;
  _gps_lat_type gps_lat;

   typedef int32_t _gps_lon_type;
  _gps_lon_type gps_lon;

   typedef float _gps_alt_type;
  _gps_alt_type gps_alt;

   typedef float _gps_vN_type;
  _gps_vN_type gps_vN;

   typedef float _gps_vE_type;
  _gps_vE_type gps_vE;

   typedef float _gps_vD_type;
  _gps_vD_type gps_vD;

   typedef float _dvl_vX_type;
  _dvl_vX_type dvl_vX;

   typedef float _dvl_vY_type;
  _dvl_vY_type dvl_vY;

   typedef float _dvl_vZ_type;
  _dvl_vZ_type dvl_vZ;





  typedef boost::shared_ptr< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> const> ConstPtr;

}; // struct gps_dvl_ins_stamped_

typedef ::utils::gps_dvl_ins_stamped_<std::allocator<void> > gps_dvl_ins_stamped;

typedef boost::shared_ptr< ::utils::gps_dvl_ins_stamped > gps_dvl_ins_stampedPtr;
typedef boost::shared_ptr< ::utils::gps_dvl_ins_stamped const> gps_dvl_ins_stampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::gps_dvl_ins_stamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::gps_dvl_ins_stamped_<ContainerAllocator1> & lhs, const ::utils::gps_dvl_ins_stamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sample_count == rhs.sample_count &&
    lhs.ekf_roll == rhs.ekf_roll &&
    lhs.ekf_pitch == rhs.ekf_pitch &&
    lhs.ekf_yaw == rhs.ekf_yaw &&
    lhs.ekf_lat == rhs.ekf_lat &&
    lhs.ekf_lon == rhs.ekf_lon &&
    lhs.ekf_alt == rhs.ekf_alt &&
    lhs.ekf_vN == rhs.ekf_vN &&
    lhs.ekf_vE == rhs.ekf_vE &&
    lhs.ekf_vD == rhs.ekf_vD &&
    lhs.ekf_vX == rhs.ekf_vX &&
    lhs.ekf_vY == rhs.ekf_vY &&
    lhs.ekf_vZ == rhs.ekf_vZ &&
    lhs.rad_gyro_X == rhs.rad_gyro_X &&
    lhs.rad_gyro_Y == rhs.rad_gyro_Y &&
    lhs.rad_gyro_Z == rhs.rad_gyro_Z &&
    lhs.angular_acc_X == rhs.angular_acc_X &&
    lhs.angular_acc_Y == rhs.angular_acc_Y &&
    lhs.angular_acc_Z == rhs.angular_acc_Z &&
    lhs.alt_DVL == rhs.alt_DVL &&
    lhs.dvl_error_code == rhs.dvl_error_code &&
    lhs.flag_to_check == rhs.flag_to_check &&
    lhs.imu_deg_gyro_X == rhs.imu_deg_gyro_X &&
    lhs.imu_deg_gyro_Y == rhs.imu_deg_gyro_Y &&
    lhs.imu_deg_gyro_Z == rhs.imu_deg_gyro_Z &&
    lhs.imu_mag_X == rhs.imu_mag_X &&
    lhs.imu_mag_Y == rhs.imu_mag_Y &&
    lhs.imu_mag_Z == rhs.imu_mag_Z &&
    lhs.imu_acc_X == rhs.imu_acc_X &&
    lhs.imu_acc_Y == rhs.imu_acc_Y &&
    lhs.imu_acc_Z == rhs.imu_acc_Z &&
    lhs.gps_lat == rhs.gps_lat &&
    lhs.gps_lon == rhs.gps_lon &&
    lhs.gps_alt == rhs.gps_alt &&
    lhs.gps_vN == rhs.gps_vN &&
    lhs.gps_vE == rhs.gps_vE &&
    lhs.gps_vD == rhs.gps_vD &&
    lhs.dvl_vX == rhs.dvl_vX &&
    lhs.dvl_vY == rhs.dvl_vY &&
    lhs.dvl_vZ == rhs.dvl_vZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::gps_dvl_ins_stamped_<ContainerAllocator1> & lhs, const ::utils::gps_dvl_ins_stamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af19aa78b3d90a13c41e03b9a86c6e4f";
  }

  static const char* value(const ::utils::gps_dvl_ins_stamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf19aa78b3d90a13ULL;
  static const uint64_t static_value2 = 0xc41e03b9a86c6e4fULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/gps_dvl_ins_stamped";
  }

  static const char* value(const ::utils::gps_dvl_ins_stamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 sample_count\n"
"float32 ekf_roll\n"
"float32 ekf_pitch\n"
"float32 ekf_yaw\n"
"float64 ekf_lat\n"
"float64 ekf_lon\n"
"float32 ekf_alt\n"
"float32 ekf_vN\n"
"float32 ekf_vE\n"
"float32 ekf_vD\n"
"float32 ekf_vX\n"
"float32 ekf_vY\n"
"float32 ekf_vZ\n"
"float32 rad_gyro_X\n"
"float32 rad_gyro_Y\n"
"float32 rad_gyro_Z\n"
"float32 angular_acc_X\n"
"float32 angular_acc_Y\n"
"float32 angular_acc_Z\n"
"uint16 alt_DVL\n"
"uint8[] dvl_error_code\n"
"uint8 flag_to_check\n"
"float32 imu_deg_gyro_X\n"
"float32 imu_deg_gyro_Y\n"
"float32 imu_deg_gyro_Z\n"
"float32 imu_mag_X\n"
"float32 imu_mag_Y\n"
"float32 imu_mag_Z\n"
"float32 imu_acc_X\n"
"float32 imu_acc_Y\n"
"float32 imu_acc_Z\n"
"int32 gps_lat\n"
"int32 gps_lon\n"
"float32 gps_alt\n"
"float32 gps_vN\n"
"float32 gps_vE\n"
"float32 gps_vD\n"
"float32 dvl_vX\n"
"float32 dvl_vY\n"
"float32 dvl_vZ\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::utils::gps_dvl_ins_stamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sample_count);
      stream.next(m.ekf_roll);
      stream.next(m.ekf_pitch);
      stream.next(m.ekf_yaw);
      stream.next(m.ekf_lat);
      stream.next(m.ekf_lon);
      stream.next(m.ekf_alt);
      stream.next(m.ekf_vN);
      stream.next(m.ekf_vE);
      stream.next(m.ekf_vD);
      stream.next(m.ekf_vX);
      stream.next(m.ekf_vY);
      stream.next(m.ekf_vZ);
      stream.next(m.rad_gyro_X);
      stream.next(m.rad_gyro_Y);
      stream.next(m.rad_gyro_Z);
      stream.next(m.angular_acc_X);
      stream.next(m.angular_acc_Y);
      stream.next(m.angular_acc_Z);
      stream.next(m.alt_DVL);
      stream.next(m.dvl_error_code);
      stream.next(m.flag_to_check);
      stream.next(m.imu_deg_gyro_X);
      stream.next(m.imu_deg_gyro_Y);
      stream.next(m.imu_deg_gyro_Z);
      stream.next(m.imu_mag_X);
      stream.next(m.imu_mag_Y);
      stream.next(m.imu_mag_Z);
      stream.next(m.imu_acc_X);
      stream.next(m.imu_acc_Y);
      stream.next(m.imu_acc_Z);
      stream.next(m.gps_lat);
      stream.next(m.gps_lon);
      stream.next(m.gps_alt);
      stream.next(m.gps_vN);
      stream.next(m.gps_vE);
      stream.next(m.gps_vD);
      stream.next(m.dvl_vX);
      stream.next(m.dvl_vY);
      stream.next(m.dvl_vZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_dvl_ins_stamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::gps_dvl_ins_stamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::gps_dvl_ins_stamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sample_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sample_count);
    s << indent << "ekf_roll: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_roll);
    s << indent << "ekf_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_pitch);
    s << indent << "ekf_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_yaw);
    s << indent << "ekf_lat: ";
    Printer<double>::stream(s, indent + "  ", v.ekf_lat);
    s << indent << "ekf_lon: ";
    Printer<double>::stream(s, indent + "  ", v.ekf_lon);
    s << indent << "ekf_alt: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_alt);
    s << indent << "ekf_vN: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_vN);
    s << indent << "ekf_vE: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_vE);
    s << indent << "ekf_vD: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_vD);
    s << indent << "ekf_vX: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_vX);
    s << indent << "ekf_vY: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_vY);
    s << indent << "ekf_vZ: ";
    Printer<float>::stream(s, indent + "  ", v.ekf_vZ);
    s << indent << "rad_gyro_X: ";
    Printer<float>::stream(s, indent + "  ", v.rad_gyro_X);
    s << indent << "rad_gyro_Y: ";
    Printer<float>::stream(s, indent + "  ", v.rad_gyro_Y);
    s << indent << "rad_gyro_Z: ";
    Printer<float>::stream(s, indent + "  ", v.rad_gyro_Z);
    s << indent << "angular_acc_X: ";
    Printer<float>::stream(s, indent + "  ", v.angular_acc_X);
    s << indent << "angular_acc_Y: ";
    Printer<float>::stream(s, indent + "  ", v.angular_acc_Y);
    s << indent << "angular_acc_Z: ";
    Printer<float>::stream(s, indent + "  ", v.angular_acc_Z);
    s << indent << "alt_DVL: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.alt_DVL);
    s << indent << "dvl_error_code[]" << std::endl;
    for (size_t i = 0; i < v.dvl_error_code.size(); ++i)
    {
      s << indent << "  dvl_error_code[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.dvl_error_code[i]);
    }
    s << indent << "flag_to_check: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_to_check);
    s << indent << "imu_deg_gyro_X: ";
    Printer<float>::stream(s, indent + "  ", v.imu_deg_gyro_X);
    s << indent << "imu_deg_gyro_Y: ";
    Printer<float>::stream(s, indent + "  ", v.imu_deg_gyro_Y);
    s << indent << "imu_deg_gyro_Z: ";
    Printer<float>::stream(s, indent + "  ", v.imu_deg_gyro_Z);
    s << indent << "imu_mag_X: ";
    Printer<float>::stream(s, indent + "  ", v.imu_mag_X);
    s << indent << "imu_mag_Y: ";
    Printer<float>::stream(s, indent + "  ", v.imu_mag_Y);
    s << indent << "imu_mag_Z: ";
    Printer<float>::stream(s, indent + "  ", v.imu_mag_Z);
    s << indent << "imu_acc_X: ";
    Printer<float>::stream(s, indent + "  ", v.imu_acc_X);
    s << indent << "imu_acc_Y: ";
    Printer<float>::stream(s, indent + "  ", v.imu_acc_Y);
    s << indent << "imu_acc_Z: ";
    Printer<float>::stream(s, indent + "  ", v.imu_acc_Z);
    s << indent << "gps_lat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gps_lat);
    s << indent << "gps_lon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gps_lon);
    s << indent << "gps_alt: ";
    Printer<float>::stream(s, indent + "  ", v.gps_alt);
    s << indent << "gps_vN: ";
    Printer<float>::stream(s, indent + "  ", v.gps_vN);
    s << indent << "gps_vE: ";
    Printer<float>::stream(s, indent + "  ", v.gps_vE);
    s << indent << "gps_vD: ";
    Printer<float>::stream(s, indent + "  ", v.gps_vD);
    s << indent << "dvl_vX: ";
    Printer<float>::stream(s, indent + "  ", v.dvl_vX);
    s << indent << "dvl_vY: ";
    Printer<float>::stream(s, indent + "  ", v.dvl_vY);
    s << indent << "dvl_vZ: ";
    Printer<float>::stream(s, indent + "  ", v.dvl_vZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_GPS_DVL_INS_STAMPED_H

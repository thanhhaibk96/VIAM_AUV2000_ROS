// Generated by gencpp from file utils/bms_stamped.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_BMS_STAMPED_H
#define UTILS_MESSAGE_BMS_STAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct bms_stamped_
{
  typedef bms_stamped_<ContainerAllocator> Type;

  bms_stamped_()
    : batteryTotal(0.0)
    , batteryCapacity(0.0)
    , batteryUsed(0.0)
    , batteryPercentage(0.0)
    , batteryCurrent(0.0)
    , baterryVoltage(0.0)  {
    }
  bms_stamped_(const ContainerAllocator& _alloc)
    : batteryTotal(0.0)
    , batteryCapacity(0.0)
    , batteryUsed(0.0)
    , batteryPercentage(0.0)
    , batteryCurrent(0.0)
    , baterryVoltage(0.0)  {
  (void)_alloc;
    }



   typedef float _batteryTotal_type;
  _batteryTotal_type batteryTotal;

   typedef float _batteryCapacity_type;
  _batteryCapacity_type batteryCapacity;

   typedef float _batteryUsed_type;
  _batteryUsed_type batteryUsed;

   typedef float _batteryPercentage_type;
  _batteryPercentage_type batteryPercentage;

   typedef float _batteryCurrent_type;
  _batteryCurrent_type batteryCurrent;

   typedef float _baterryVoltage_type;
  _baterryVoltage_type baterryVoltage;





  typedef boost::shared_ptr< ::utils::bms_stamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::bms_stamped_<ContainerAllocator> const> ConstPtr;

}; // struct bms_stamped_

typedef ::utils::bms_stamped_<std::allocator<void> > bms_stamped;

typedef boost::shared_ptr< ::utils::bms_stamped > bms_stampedPtr;
typedef boost::shared_ptr< ::utils::bms_stamped const> bms_stampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::bms_stamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::bms_stamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::bms_stamped_<ContainerAllocator1> & lhs, const ::utils::bms_stamped_<ContainerAllocator2> & rhs)
{
  return lhs.batteryTotal == rhs.batteryTotal &&
    lhs.batteryCapacity == rhs.batteryCapacity &&
    lhs.batteryUsed == rhs.batteryUsed &&
    lhs.batteryPercentage == rhs.batteryPercentage &&
    lhs.batteryCurrent == rhs.batteryCurrent &&
    lhs.baterryVoltage == rhs.baterryVoltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::bms_stamped_<ContainerAllocator1> & lhs, const ::utils::bms_stamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::bms_stamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::bms_stamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::bms_stamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::bms_stamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::bms_stamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::bms_stamped_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::bms_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3439bc04eebf35f1a5ae09dd8a711f94";
  }

  static const char* value(const ::utils::bms_stamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3439bc04eebf35f1ULL;
  static const uint64_t static_value2 = 0xa5ae09dd8a711f94ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::bms_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/bms_stamped";
  }

  static const char* value(const ::utils::bms_stamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::bms_stamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 batteryTotal\n"
"float32 batteryCapacity\n"
"float32 batteryUsed\n"
"float32 batteryPercentage\n"
"float32 batteryCurrent\n"
"float32 baterryVoltage\n"
;
  }

  static const char* value(const ::utils::bms_stamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::bms_stamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.batteryTotal);
      stream.next(m.batteryCapacity);
      stream.next(m.batteryUsed);
      stream.next(m.batteryPercentage);
      stream.next(m.batteryCurrent);
      stream.next(m.baterryVoltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bms_stamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::bms_stamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::bms_stamped_<ContainerAllocator>& v)
  {
    s << indent << "batteryTotal: ";
    Printer<float>::stream(s, indent + "  ", v.batteryTotal);
    s << indent << "batteryCapacity: ";
    Printer<float>::stream(s, indent + "  ", v.batteryCapacity);
    s << indent << "batteryUsed: ";
    Printer<float>::stream(s, indent + "  ", v.batteryUsed);
    s << indent << "batteryPercentage: ";
    Printer<float>::stream(s, indent + "  ", v.batteryPercentage);
    s << indent << "batteryCurrent: ";
    Printer<float>::stream(s, indent + "  ", v.batteryCurrent);
    s << indent << "baterryVoltage: ";
    Printer<float>::stream(s, indent + "  ", v.baterryVoltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_BMS_STAMPED_H
